# Github action to build Raspberry Pi image from main branch

name: Build image test

on:
  workflow_dispatch:

jobs:
  build_main_image:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch latest release tag
        run: |
          LATEST_RELEASE="$(curl -sL https://api.github.com/repos/buanet/ioBroker.raspberry-os/releases/latest | jq -r '.tag_name')"
          echo "Latest release tag: $LATEST_RELEASE"
          echo "RELEASE_TAG=$LATEST_RELEASE" >> $GITHUB_ENV

      - name: Checkout ioBroker.raspberry-os latest stable
        uses: actions/checkout@v4
        with:
          repository: 'buanet/ioBroker.raspberry-os'
          ref: ${{ env.RELEASE_TAG }}
          path: ioBroker.raspberry-os

      - uses: usimd/pi-gen-action@v1
        with:
          compression: zip
          compression-level: 6
          disable-first-boot-user-rename: 0
      
          # Additional options to include in PIGEN_DOCKER_OPTS
          docker-opts: ''

          enable-noobs: false
          enable-ssh: 1
          export-last-stage-only: true
      
          # Comma or whitespace separated list of additional packages to install on host 
          # before running pi-gen. Use this list to add any packages your custom stages may 
          # require. Note that this is not affecting the final image. In order to add 
          # additional packages, you need to add a respective 'XX-packages' file in your 
          # custom stage.
          extra-host-dependencies: ''
      
          # Comma or whitespace separated list of additional modules to load on host before 
          # running pi-gen. If your custom stage requires additional software or kernel 
          # modules to be loaded, add them here. Note that this is not meant to configure 
          # modules to be loaded in the target image.
          extra-host-modules: ''
      
          # Token to use for checking out pi-gen repo.
          github-token: ${{ github.token }}
      
          hostname: iobroker-pi
          image-name: ioBrokerPi
          keyboard-keymap: gb
          keyboard-layout: English (UK)
          locale: en_GB.UTF-8
      
          username: pi
          password: raspberry
      
          # Path where selected pi-gen ref will be checked out to. If the path does not yet 
          # exist, it will be created (including its parents).
          pi-gen-dir: pi-gen
      
          # GitHub repository to fetch pi-gen from, must be a fork from RPi-Distro/pi-gen.
          pi-gen-repository: RPi-Distro/pi-gen
      
          # Release version of pi-gen to use. This can both be a branch or tag name known in 
          # the pi-gen repository.
          pi-gen-version: arm64
      
          # The release version to build images against. Valid values are jessie, stretch, 
          # buster, bullseye, bookworm, and testing.
          release: bullseye
      
          # Setting to `1` will prevent pi-gen from dropping the "capabilities" feature. 
          # Generating the root filesystem with capabilities enabled and running it from a 
          # filesystem that does not support capabilities (like NFS) can cause issues. Only 
          # enable this if you understand what it is.
          setfcap: ''
      
          # List of stage name to execute in given order. Relative and absolute paths to 
          # custom stage directories are allowed here. Note that by default pi-gen exports 
          # images in stage2 (lite), stage4 and stage5. You probably want to hook in custom 
          # stages before one of the exported stages. Otherwise, the action will make sure 
          # any custom stage will include an image export directive.
          stage-list: stage0 stage1 stage2 ./ioBroker.raspberry-os/stage-iobroker
      
          # System timezone.
          timezone: Europe/London
      
          # Use qcow2 images to reduce space and runtime requirements.
          use-qcow2: 1
      
          # Print all output from pi-gen.
          verbose-output: true

      - uses: actions/upload-artifact@v3
        with:
          name: pi-gen-image
          path: ${{ steps.build.outputs.image-path }}
