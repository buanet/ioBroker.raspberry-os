# Github action to build Raspberry Pi image

name: Build Raspberry Pi image

on:
  workflow_dispatch:
  release:
    types:
      - published
  schedule:
    - cron: '0 1 * * 1'
      
jobs:
  bulid_image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2.3.4
        with:
          repository: 'buanet/ioBroker.raspberry-os'
          ref: 'main'
        
      - name: Install prerequisites
        run: sudo apt-get update && sudo apt-get install lftp
          
      - name: Preparing build
        run: |
          echo "Getting source files for build..."
          git clone https://github.com/RPi-Distro/pi-gen
          echo "Copying config file and iobrokerpi stage..."
          cp ./config pi-gen/config
          cp -R ./stage-iobroker pi-gen/stage-iobroker
          chmod -R +x pi-gen
          cd ./pi-gen
          echo "Adding skip files..."
          touch ./stage3/SKIP ./stage4/SKIP ./stage5/SKIP
          touch ./stage4/SKIP_IMAGES ./stage5/SKIP_IMAGES
          rm ./stage4/EXPORT* ./stage5/EXPORT*
          echo "Manipulating build script..."
          sed -i 's/-e "GIT_HASH=${GIT_HASH}"/-e "GIT_HASH=${GIT_HASH}" --hostname iobroker-pi/' ./build-docker.sh
      
      - name: Build image
        run: |
          cd ./pi-gen
          ./build-docker.sh
          
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: deploy
          path: pi-gen/deploy/
          
      - name: Deploy image to smarthome.buanet.de
        run: |
          echo "Getting image file information..."
          FILEPATH=$(find ./pi-gen/deploy/ -name '*.zip')
          FILENAME=$(echo $FILEPATH | cut -d'/' -f4-)
          echo "Done."
          echo ''
          echo "Generating info.txt..."
          echo -n $FILENAME > info.txt
          echo "Done."
          echo ''
          echo "Getting information about current published image file from smarthome.buanet.de..."
          lftp -v -c "
            set net:timeout 5
            set net:max-retries 3
            set net:reconnect-interval-base 5
            set ftp:ssl-force yes
            set ftp:ssl-protect-data true
            set ssl:verify-certificate no
            set xfer:clobber on
            open -u ${{ secrets.FTP_USER }},${{ secrets.FTP_PASS }} ftp://${{ secrets.FTP_HOST }}:${{ secrets.FTP_PORT }}
            get ./latest-rpios-iobroker/info.txt -o info.old.txt
            exit
          "
          FILENAMEOLD=$(cat info.old.txt)
          echo "Name of current published image is $FILENAMEOLD."
          echo "Done."
          echo ''
          echo "Pushing new image and info file to smarthome.buanet.de..."
          lftp -v -c "
            set net:timeout 5
            set net:max-retries 3
            set net:reconnect-interval-base 5
            set ftp:ssl-force yes
            set ftp:ssl-protect-data true
            set ssl:verify-certificate no
            open -u ${{ secrets.FTP_USER }},${{ secrets.FTP_PASS }} ftp://${{ secrets.FTP_HOST }}:${{ secrets.FTP_PORT }}
            cd /latest-rpios-iobroker/
            put $FILEPATH
            put info.txt
            exit
          "
          echo "Done."
          echo ''
          echo "Deleting old files from smarthome.buanet.de..."
          if [ $FILENAME != $FILENAMEOLD ]
          then
            lftp -v -c "
              set net:timeout 5
              set net:max-retries 3
              set net:reconnect-interval-base 5
              set ftp:ssl-force yes
              set ftp:ssl-protect-data true
              set ssl:verify-certificate no
              open -u ${{ secrets.FTP_USER }},${{ secrets.FTP_PASS }} ftp://${{ secrets.FTP_HOST }}:${{ secrets.FTP_PORT }}
              cd /latest-rpios-iobroker/
              rm $FILENAMEOLD | true
              exit
            "
          fi
          echo "Done."
          echo ''

      - name: Deploy image to iobroker.net
        run: |
          echo "Getting image file information..."
          FILEPATH=$(find ./pi-gen/deploy/ -name '*.zip')
          FILENAME=$(echo $FILEPATH | cut -d'/' -f4-)
          echo "Done."
          echo ''
          
          echo "Pushing new image to iobroker.net..."
          lftp -v -c "
            set net:timeout 5
            set net:max-retries 3
            set net:reconnect-interval-base 5
            set sftp:auto-confirm yes
            open -u ${{ secrets.FTP1_USER }},${{ secrets.FTP1_PASS }} sftp://${{ secrets.FTP1_HOST }}:${{ secrets.FTP1_PORT }}
            put $FILEPATH -o ioBroker_Image_RPi_v1.1.0_latest.zip
            exit
          "
          echo "Done."
          echo ''
